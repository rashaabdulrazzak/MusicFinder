{"version":3,"sources":["Artist.js","Tracks.js","App.js","serviceWorker.js","index.js"],"names":["Artist","artist","images","name","followers","genres","Row","Col","className","total","join","src","url","alt","style","width","height","borderRadius","objectFit","Tracks","state","playing","audio","playingPreviewUrl","playAudio","previewUrl","Audio","pause","setState","play","trackIcon","track","preview_url","tracks","this","props","Container","map","id","album","key","onClick","Component","API_ADDRESS","App","atristQuery","searchArtist","query","fetch","then","response","json","console","log","artists","items","resp","catch","error","alert","message","updateArtistQuery","event","target","value","handleKeyPress","placeholder","onChange","onKeyPress","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.537d453a.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Row,Col } from 'react-bootstrap';\r\n\r\nconst Artist =({artist})=>{\r\n    if(!artist) return null\r\n    const {images,name,followers,genres} = artist;\r\n    return <Row >\r\n             <Col className='text-center mb-2'>\r\n                <h3> {name}</h3>\r\n                <p>{followers.total} followers</p>\r\n                <p>{genres.join(',')}</p>\r\n                <img src={ images[0] && images[0].url} \r\n                alt='artist-profile'\r\n                style={{\r\n                    width:200,\r\n                    height:200,\r\n                    borderRadius :100,\r\n                    objectFit:'cover'\r\n                }}\r\n                />\r\n            </Col>\r\n    </Row>\r\n    }\r\nexport default Artist;","import React, { Component } from \"react\";\r\nimport { Container, Row } from \"react-bootstrap\";\r\n\r\nclass Tracks extends Component {\r\n  state = { playing: false, audio: null, playingPreviewUrl: null };\r\n  playAudio = (previewUrl) => () => {\r\n    const audio = new Audio(previewUrl);\r\n    if (!this.state.playing) {\r\n      audio.play();\r\n      this.setState({ playing: true, audio, playingPreviewUrl: previewUrl });\r\n    } else {\r\n      this.state.audio.pause();\r\n      if (this.state.playingPreviewUrl === previewUrl) {\r\n        this.setState({ playing: false });\r\n      } else {\r\n        audio.play();\r\n        this.setState({ audio, playingPreviewUrl: previewUrl });\r\n      }\r\n    }\r\n  };\r\n  trackIcon = (track) => {\r\n    if (!track.preview_url) {\r\n      return <span> N/A</span>;\r\n    }\r\n    if (\r\n      this.state.playing &&\r\n      this.state.playingPreviewUrl === track.preview_url\r\n    ) {\r\n      return <span> | |</span>;\r\n    }\r\n    return <span>&#9654;</span>;\r\n  };\r\n  render() {\r\n    const { tracks } = this.props;\r\n    return (\r\n      <Container>\r\n        <Row className=\"justify-content-center\">\r\n          {tracks.map((track) => {\r\n            const { id, name, album, preview_url } = track;\r\n            return (\r\n              <div\r\n                className=\"col-sm-12 col-md-6 col-lg-4\"\r\n                key={id}\r\n                onClick={this.playAudio(preview_url)}\r\n              >\r\n                <div className=\"track\">\r\n                  <img\r\n                    src={album.images[0].url}\r\n                    alt=\"trackimage\"\r\n                    className=\"track-image\"\r\n                  />\r\n                  <p className=\"track-text\">{name}</p>\r\n                  <p className=\"track-icon\">{this.trackIcon(track)}</p>\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n        </Row>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\nexport default Tracks;\r\n","import React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport Artist from './Artist';\nimport Tracks from './Tracks';\n//import Search from './Search';\nconst API_ADDRESS = 'https://spotify-api-wrapper.appspot.com';\n\nclass App extends Component {\n  state={ \n    atristQuery:'Marshmello', \n    artist:null,\n    tracks :[]\n  };\n componentDidMount(){\n   this.searchArtist()\n }\nsearchArtist =()=>{\n    const query = this.state.atristQuery\n   //console.log(atristQuery)\n  fetch(`${API_ADDRESS}/artist/${query}`)\n  .then(response => response.json())\n  .then(json =>{\n     console.log(json);\n     if(json.artists.total>0){\n       const artist = json.artists.items[0];\n       console.log('artist', artist)\n       this.setState({artist});       \n      fetch(`${API_ADDRESS}/artist/${artist.id}/top-tracks`)\n      .then(resp => resp.json())\n      .then(json => this.setState({tracks:json.tracks}))\n      .catch(error => alert(error.message));\n     }    \n    })\n    .catch(error=> alert(error.message));\n  \n}\n updateArtistQuery =(event)=>{\n    console.log('event.target.value',event.target.value);\n    this.setState({atristQuery :event.target.value});\n  }\n  handleKeyPress=(event)=>{\n if(event.key === 'Enter'){\n   console.log(this.state)\n   this.searchArtist()\n }\n}\n  render(){\n  return (\n    <Container>\n      <Row className=\"justify-content-center\">\n          <Col>\n            <h2 className='text-center'> Music master</h2>          \n           {/*<Search searchArtist = {this.searchArtist}/>*/}\n              <Row className=\"justify-content-center py-5 mt-2\">\n            <div className='d-flex col-4 0ffset-4'>            \n              <input className='form-control mr-sm-2' placeholder='Search an Artist'\n               onChange={this.updateArtistQuery}\n               onKeyPress={this.handleKeyPress}/>            \n            <button className='btn btn-outline-success my-2 my-sm-0' onClick={this.searchArtist}>Search</button>\n           \n            </div>  \n        </Row>\n          </Col>\n           </Row>\n      <Row>\n          <Col>\n             <Artist artist={this.state.artist}/>      \n             <Tracks tracks={this.state.tracks} />\n          </Col>\n      </Row>\n    </Container>\n  )\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}